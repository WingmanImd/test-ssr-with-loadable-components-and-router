"use strict";

exports.__esModule = true;
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash"));

var _react = _interopRequireDefault(require("react"));

var _sharedInternals = require("./sharedInternals");

var _ChunkExtractorManager = _interopRequireDefault(require("./ChunkExtractorManager"));

var _util = require("./util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable react/no-danger */
var EXTENSION_SCRIPT_TYPES = {
  '.js': 'script',
  '.css': 'style'
};

function extensionToScriptType(extension) {
  return EXTENSION_SCRIPT_TYPES[extension] || null;
}

function getAssets(chunks, getAsset) {
  return _lodash.default.uniqBy(_lodash.default.flatMap(chunks, function (chunk) {
    return getAsset(chunk);
  }), 'url');
}

function assetToScriptTag(asset) {
  return "<script async data-chunk=\"" + asset.chunk + "\" src=\"" + asset.url + "\"></script>";
}

function assetToScriptElement(asset) {
  return _react.default.createElement("script", {
    key: asset.url,
    async: true,
    "data-chunk": asset.chunk,
    src: asset.url
  });
}

function assetToStyleTag(asset) {
  return "<link data-chunk=\"" + asset.chunk + "\" rel=\"stylesheet\" href=\"" + asset.url + "\">";
}

function assetToStyleElement(asset) {
  return _react.default.createElement("link", {
    key: asset.url,
    "data-chunk": asset.chunk,
    rel: "stylesheet",
    href: asset.url
  });
}

var LINK_ASSET_HINTS = {
  mainAsset: 'data-chunk',
  childAsset: 'data-parent-chunk'
};

function assetToLinkTag(asset) {
  var hint = LINK_ASSET_HINTS[asset.type];
  return "<link " + hint + "=\"" + asset.chunk + "\" rel=\"" + asset.linkType + "\" as=\"" + asset.scriptType + "\" href=\"" + asset.url + "\">";
}

function assetToLinkElement(asset) {
  var _props;

  var hint = LINK_ASSET_HINTS[asset.type];
  var props = (_props = {
    key: asset.url
  }, _props[hint] = asset.chunk, _props.rel = asset.linkType, _props.as = asset.scriptType, _props.href = asset.url, _props);
  return _react.default.createElement("link", props);
}

function joinTags(tags) {
  return tags.join('\n');
}

var HOT_UPDATE_REGEXP = /\.hot-update\.js$/;

function isValidChunkAsset(chunkAsset) {
  return chunkAsset.scriptType && !HOT_UPDATE_REGEXP.test(chunkAsset.filename);
}

var ChunkExtractor =
/*#__PURE__*/
function () {
  function ChunkExtractor(_temp) {
    var _ref = _temp === void 0 ? [] : _temp,
        statsFile = _ref.statsFile,
        stats = _ref.stats,
        _ref$entrypoints = _ref.entrypoints,
        entrypoints = _ref$entrypoints === void 0 ? ['main'] : _ref$entrypoints,
        outputPath = _ref.outputPath;

    this.stats = stats || (0, _util.smartRequire)(statsFile);
    this.outputPath = outputPath || this.stats.outputPath;
    this.statsFile = statsFile;
    this.entrypoints = Array.isArray(entrypoints) ? entrypoints : [entrypoints];
    this.chunks = [];
  }

  var _proto = ChunkExtractor.prototype;

  _proto.resolvePublicUrl = function resolvePublicUrl(filename) {
    var publicPath = this.stats.publicPath;
    return (0, _util.joinURLPath)(publicPath, filename);
  };

  _proto.getChunkGroup = function getChunkGroup(chunk) {
    var chunkGroup = this.stats.namedChunkGroups[chunk];
    (0, _sharedInternals.invariant)(chunkGroup, "cannot find " + chunk + " in stats");
    return chunkGroup;
  };

  _proto.createChunkAsset = function createChunkAsset(_ref2) {
    var filename = _ref2.filename,
        chunk = _ref2.chunk,
        type = _ref2.type,
        linkType = _ref2.linkType;
    return {
      filename: filename,
      scriptType: extensionToScriptType(_path.default.extname(filename).toLowerCase()),
      chunk: chunk,
      url: this.resolvePublicUrl(filename),
      path: _path.default.join(this.outputPath, filename),
      type: type,
      linkType: linkType
    };
  };

  _proto.getChunkAssets = function getChunkAssets(chunks) {
    var _this = this;

    var one = function one(chunk) {
      var chunkGroup = _this.getChunkGroup(chunk);

      return chunkGroup.assets.map(function (filename) {
        return _this.createChunkAsset({
          filename: filename,
          chunk: chunk,
          type: 'mainAsset',
          linkType: 'preload'
        });
      }).filter(isValidChunkAsset);
    };

    if (Array.isArray(chunks)) {
      return getAssets(chunks, one);
    }

    return one(chunks);
  };

  _proto.getChunkChildAssets = function getChunkChildAssets(chunks, type) {
    var _this2 = this;

    var one = function one(chunk) {
      var chunkGroup = _this2.getChunkGroup(chunk);

      var assets = chunkGroup.childAssets[type] || [];
      return assets.map(function (filename) {
        return _this2.createChunkAsset({
          filename: filename,
          chunk: chunk,
          type: 'childAsset',
          linkType: type
        });
      }).filter(isValidChunkAsset);
    };

    if (Array.isArray(chunks)) {
      return getAssets(chunks, one);
    }

    return one(chunks);
  };

  _proto.getChunkDependencies = function getChunkDependencies(chunks) {
    var _this3 = this;

    var one = function one(chunk) {
      var chunkGroup = _this3.getChunkGroup(chunk);

      return chunkGroup.chunks;
    };

    if (Array.isArray(chunks)) {
      return _lodash.default.uniq(_lodash.default.flatMap(chunks, one));
    }

    return one(chunks);
  };

  _proto.getRequiredChunksScriptContent = function getRequiredChunksScriptContent() {
    return "window." + _sharedInternals.LOADABLE_REQUIRED_CHUNKS_KEY + " = " + JSON.stringify(this.getChunkDependencies(this.chunks)) + ";";
  };

  _proto.getRequiredChunksScriptTag = function getRequiredChunksScriptTag() {
    return "<script>" + this.getRequiredChunksScriptContent() + "</script>";
  };

  _proto.getRequiredChunksScriptElement = function getRequiredChunksScriptElement() {
    return _react.default.createElement("script", {
      key: "required",
      dangerouslySetInnerHTML: {
        __html: this.getRequiredChunksScriptContent()
      }
    });
  }; // Public methods
  // -----------------
  // Collect


  _proto.addChunk = function addChunk(chunk) {
    if (this.chunks.indexOf(chunk) !== -1) return;
    this.chunks.push(chunk);
  };

  _proto.collectChunks = function collectChunks(app) {
    return _react.default.createElement(_ChunkExtractorManager.default, {
      extractor: this
    }, app);
  }; // Utilities


  _proto.requireEntrypoint = function requireEntrypoint(entrypoint) {
    entrypoint = entrypoint || this.entrypoints[0];
    var assets = this.getChunkAssets(entrypoint);
    var mainAsset = assets.find(function (asset) {
      return asset.scriptType === 'script';
    });
    (0, _sharedInternals.invariant)(mainAsset, 'asset not found');
    return (0, _util.smartRequire)(mainAsset.path);
  }; // Main assets


  _proto.getMainAssets = function getMainAssets(scriptType) {
    var chunks = this.chunks.concat(this.entrypoints);
    var assets = this.getChunkAssets(chunks);

    if (scriptType) {
      return assets.filter(function (asset) {
        return asset.scriptType === scriptType;
      });
    }

    return assets;
  };

  _proto.getScriptTags = function getScriptTags() {
    var requiredScriptTag = this.getRequiredChunksScriptTag();
    var mainAssets = this.getMainAssets('script');
    var assetsScriptTags = mainAssets.map(function (asset) {
      return assetToScriptTag(asset);
    });
    return joinTags([requiredScriptTag].concat(assetsScriptTags));
  };

  _proto.getScriptElements = function getScriptElements() {
    var requiredScriptElement = this.getRequiredChunksScriptElement();
    var mainAssets = this.getMainAssets('script');
    var assetsScriptElements = mainAssets.map(function (asset) {
      return assetToScriptElement(asset);
    });
    return [requiredScriptElement].concat(assetsScriptElements);
  };

  _proto.getStyleTags = function getStyleTags() {
    var mainAssets = this.getMainAssets('style');
    return joinTags(mainAssets.map(function (asset) {
      return assetToStyleTag(asset);
    }));
  };

  _proto.getStyleElements = function getStyleElements() {
    var mainAssets = this.getMainAssets('style');
    return mainAssets.map(function (asset) {
      return assetToStyleElement(asset);
    });
  }; // Pre assets


  _proto.getPreAssets = function getPreAssets() {
    var mainAssets = this.getMainAssets();
    var chunks = this.chunks.concat(this.entrypoints);
    var preloadAssets = this.getChunkChildAssets(chunks, 'preload');
    var prefetchAssets = this.getChunkChildAssets(chunks, 'prefetch');
    return mainAssets.concat(preloadAssets, prefetchAssets);
  };

  _proto.getLinkTags = function getLinkTags() {
    var assets = this.getPreAssets();
    var linkTags = assets.map(function (asset) {
      return assetToLinkTag(asset);
    });
    return joinTags(linkTags);
  };

  _proto.getLinkElements = function getLinkElements() {
    var assets = this.getPreAssets();
    return assets.map(function (asset) {
      return assetToLinkElement(asset);
    });
  };

  return ChunkExtractor;
}();

var _default = ChunkExtractor;
exports.default = _default;
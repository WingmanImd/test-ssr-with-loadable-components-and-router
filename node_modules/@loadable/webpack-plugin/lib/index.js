"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var path = require('path');

var fs = require('fs');

var LoadablePlugin =
/*#__PURE__*/
function () {
  function LoadablePlugin(_temp) {
    var _this = this;

    var _ref = _temp === void 0 ? {} : _temp,
        _ref$filename = _ref.filename,
        filename = _ref$filename === void 0 ? 'loadable-stats.json' : _ref$filename,
        _ref$writeToDisk = _ref.writeToDisk,
        writeToDisk = _ref$writeToDisk === void 0 ? false : _ref$writeToDisk;

    _defineProperty(this, "handleEmit", function (hookCompiler, callback) {
      var stats = hookCompiler.getStats().toJson({
        hash: true,
        publicPath: true,
        assets: true,
        chunks: false,
        modules: false,
        source: false,
        errorDetails: false,
        timings: false
      });
      var result = JSON.stringify(stats, null, 2);
      hookCompiler.assets[_this.opts.filename] = {
        source: function source() {
          return result;
        },
        size: function size() {
          return result.length;
        }
      };

      if (_this.opts.writeToDisk) {
        _this.writeAssetsFile(result);
      }

      callback();
    });

    _defineProperty(this, "isRequestFromDevServer", function () {
      if (process.argv.some(function (arg) {
        return arg.includes('webpack-dev-server');
      })) {
        return true;
      }

      return _this.compiler.outputFileSystem && _this.compiler.outputFileSystem.constructor.name === 'MemoryFileSystem';
    });

    _defineProperty(this, "getManifestOutputPath", function () {
      if (path.isAbsolute(_this.opts.filename)) {
        return _this.opts.filename;
      }

      if (_this.isRequestFromDevServer() && _this.compiler.options.devServer) {
        var outputPath = _this.compiler.options.devServer.outputPath || _this.compiler.outputPath || '/';

        if (outputPath === '/') {
          // eslint-disable-next-line no-console
          console.warn('Please use an absolute path in options.output when using webpack-dev-server.');
          outputPath = _this.compiler.context || process.cwd();
        }

        return path.resolve(outputPath, _this.opts.filename);
      }

      return path.resolve(_this.compiler.outputPath, _this.opts.filename);
    });

    _defineProperty(this, "writeAssetsFile", function (manifest) {
      var filePath = _this.getManifestOutputPath();

      var fileDir = path.dirname(filePath);

      try {
        if (!fs.existsSync(fileDir)) {
          fs.mkdirSync(fileDir);
        }
      } catch (err) {
        if (err.code !== 'EEXIST') {
          throw err;
        }
      }

      fs.writeFileSync(filePath, manifest);
    });

    this.opts = {
      filename: filename,
      writeToDisk: writeToDisk
    };
  }

  var _proto = LoadablePlugin.prototype;

  _proto.apply = function apply(compiler) {
    // Add a custom output.jsonpFunction: __LOADABLE_LOADED_CHUNKS__
    compiler.options.output.jsonpFunction = '__LOADABLE_LOADED_CHUNKS__';
    compiler.hooks.emit.tapAsync('@loadable/webpack-plugin', this.handleEmit);
  };

  return LoadablePlugin;
}();

module.exports = LoadablePlugin;
module.exports.default = LoadablePlugin;
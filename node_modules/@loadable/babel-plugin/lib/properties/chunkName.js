"use strict";

exports.__esModule = true;
exports.default = chunkNameProperty;

var _vm = _interopRequireDefault(require("vm"));

var _util = require("../util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var WEBPACK_CHUNK_NAME_REGEXP = /webpackChunkName/;

function readWebpackCommentValues(str) {
  try {
    var values = _vm.default.runInNewContext("(function(){return {" + str + "};})()");

    return values;
  } catch (e) {
    throw Error("compilation error while processing: /*" + str + "*/: " + e.message);
  }
}

function writeWebpackCommentValues(values) {
  try {
    var str = Object.keys(values).map(function (key) {
      return key + ": " + JSON.stringify(values[key]);
    }).join(', ');
    return " " + str + " ";
  } catch (e) {
    throw Error("compilation error while processing: /*" + values + "*/: " + e.message);
  }
}

function getChunkNameComment(importArg) {
  if (!importArg.has('leadingComments')) return null;
  return importArg.get('leadingComments').find(function (comment) {
    return comment.node.value.match(WEBPACK_CHUNK_NAME_REGEXP);
  });
}

function getRawChunkNameFromCommments(importArg) {
  var chunkNameComment = getChunkNameComment(importArg);
  if (!chunkNameComment) return null;
  return readWebpackCommentValues(chunkNameComment.node.value);
}

function moduleToChunk(str) {
  return str ? str.replace(/^[./]+|(\.js$)/g, '').replace(/\//, '-') : '';
}

function replaceQuasiValue(str) {
  return str ? str.replace(/\//g, '-') : str;
}

function chunkNameProperty(_ref) {
  var t = _ref.types;

  function transformQuasi(quasi, index) {
    if (index === 0) {
      return t.templateElement({
        raw: moduleToChunk(quasi.value.raw),
        cooked: moduleToChunk(quasi.value.cooked)
      }, quasi.tail);
    }

    return t.templateElement({
      raw: replaceQuasiValue(quasi.value.raw),
      cooked: replaceQuasiValue(quasi.value.cooked)
    }, quasi.tail);
  }

  function generateChunkNameNode(callPath) {
    var importArg = (0, _util.getImportArg)(callPath);

    if (importArg.isTemplateLiteral()) {
      return t.templateLiteral(importArg.node.quasis.map(transformQuasi), importArg.node.expressions);
    }

    return t.stringLiteral(moduleToChunk(importArg.node.value));
  }

  function getExistingChunkNameComment(callPath) {
    var importArg = (0, _util.getImportArg)(callPath);
    var values = getRawChunkNameFromCommments(importArg);
    return values;
  }

  function isAgressiveImport(callPath) {
    var importArg = (0, _util.getImportArg)(callPath);
    return importArg.isTemplateLiteral() && importArg.node.expressions.length > 0;
  }

  function addOrReplaceChunkNameComment(callPath, values) {
    var importArg = (0, _util.getImportArg)(callPath);
    var chunkNameComment = getChunkNameComment(importArg);

    if (chunkNameComment) {
      chunkNameComment.remove();
    }

    if (isAgressiveImport(callPath)) {
      values.webpackChunkName = '[request]';
    } // const value = t.isTemplateLiteral(chunkName)
    // ? chunkName.quasis[0].value.cooked
    // : chunkName.value


    importArg.addComment('leading', writeWebpackCommentValues(values));
  }

  function replaceChunkName(callPath) {
    var agressiveImport = isAgressiveImport(callPath);
    var values = getExistingChunkNameComment(callPath);

    if (!agressiveImport && values) {
      addOrReplaceChunkNameComment(callPath, values);
      return t.stringLiteral(values.webpackChunkName);
    }

    var chunkNameNode = generateChunkNameNode(callPath);
    var webpackChunkName = t.isTemplateLiteral(chunkNameNode) ? chunkNameNode.quasis[0].value.cooked : chunkNameNode.value;
    addOrReplaceChunkNameComment(callPath, {
      webpackChunkName: webpackChunkName
    });
    return chunkNameNode;
  }

  return function (_ref2) {
    var callPath = _ref2.callPath,
        funcPath = _ref2.funcPath;
    var chunkName = replaceChunkName(callPath);
    return t.objectMethod('method', t.identifier('chunkName'), funcPath.node.params, t.blockStatement([t.returnStatement(chunkName)]));
  };
}